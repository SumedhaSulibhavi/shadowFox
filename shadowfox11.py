# -*- coding: utf-8 -*-
"""ShadowFox.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9029jJo9Rvs14wiIR_BRxgbIHUSL9jV
"""

from google.colab import files

# Upload the file
uploaded = files.upload()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Step 1: Load the dataset
df = pd.read_csv('Sample - Superstore.csv', encoding='ISO-8859-1')  # Ensure the file name matches

# Step 2: Check the first few rows of the dataset
print(df.head())

# Step 3: Check for missing values
print(df.isnull().sum())

# Step 4: Get a statistical overview of the dataset
print(df.describe())

# Step 5: Convert 'Order Date' and 'Ship Date' to datetime
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])

# Extract additional time-related features
df['Order_Month'] = df['Order Date'].dt.month
df['Ship_Month'] = df['Ship Date'].dt.month
df['Order_DayOfWeek'] = df['Order Date'].dt.dayofweek
df['Ship_DayOfWeek'] = df['Ship Date'].dt.dayofweek

# Step 6: Data Exploration and Visualization
# Distribution of Sales
plt.figure(figsize=(12, 6))
sns.histplot(df['Sales'], kde=True, color='blue', bins=30)
plt.title('Sales Distribution')
plt.show()

# Distribution of Profit
plt.figure(figsize=(12, 6))
sns.histplot(df['Profit'], kde=True, color='green', bins=30)
plt.title('Profit Distribution')
plt.show()

# Correlation matrix (to see how different numerical features relate to each other)
correlation_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Step 7: Convert categorical columns into numerical values using LabelEncoder
label_encoder = LabelEncoder()
df['Ship Mode'] = label_encoder.fit_transform(df['Ship Mode'])
df['Segment'] = label_encoder.fit_transform(df['Segment'])
df['Category'] = label_encoder.fit_transform(df['Category'])
df['Sub-Category'] = label_encoder.fit_transform(df['Sub-Category'])
df['Region'] = label_encoder.fit_transform(df['Region'])

# Step 8: Define features (X) and target (y)
X = df[['Sales', 'Quantity', 'Discount', 'Ship Mode', 'Segment', 'Category', 'Sub-Category', 'Region', 'Order_Month', 'Ship_Month', 'Order_DayOfWeek', 'Ship_DayOfWeek']]
y = df['Profit']

# Step 9: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 10: Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 11: Predict on the test set
y_pred = model.predict(X_test)

# Step 12: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Step 13: Visualize Actual vs Predicted Profit
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)
plt.title('Actual vs Predicted Profit')
plt.xlabel('Actual Profit')
plt.ylabel('Predicted Profit')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Step 1: Load the dataset
df = pd.read_csv('Sample - Superstore.csv', encoding='ISO-8859-1')  # Ensure the file name matches

# Step 2: Check the first few rows of the dataset
print(df.head())

# Step 3: Check for missing values
print(df.isnull().sum())

# Step 4: Get a statistical overview of the dataset
print(df.describe())

# Step 5: Data Exploration and Visualization
# Distribution of Sales
plt.figure(figsize=(12, 6))
sns.histplot(df['Sales'], kde=True, color='blue', bins=30)
plt.title('Sales Distribution')
plt.show()

# Distribution of Profit
plt.figure(figsize=(12, 6))
sns.histplot(df['Profit'], kde=True, color='green', bins=30)
plt.title('Profit Distribution')
plt.show()

# Correlation matrix (to see how different numerical features relate to each other)
# Select only numerical columns for correlation
numeric_columns = df.select_dtypes(include=['number']).columns
correlation_matrix = df[numeric_columns].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Step 6: Convert 'Order Date' and 'Ship Date' to datetime
df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Ship Date'] = pd.to_datetime(df['Ship Date'])

# Extract additional time-related features
df['Order_Month'] = df['Order Date'].dt.month
df['Ship_Month'] = df['Ship Date'].dt.month
df['Order_DayOfWeek'] = df['Order Date'].dt.dayofweek
df['Ship_DayOfWeek'] = df['Ship Date'].dt.dayofweek

# Step 7: Convert categorical columns into numerical values using LabelEncoder
label_encoder = LabelEncoder()
df['Ship Mode'] = label_encoder.fit_transform(df['Ship Mode'])
df['Segment'] = label_encoder.fit_transform(df['Segment'])
df['Category'] = label_encoder.fit_transform(df['Category'])
df['Sub-Category'] = label_encoder.fit_transform(df['Sub-Category'])
df['Region'] = label_encoder.fit_transform(df['Region'])

# Step 8: Define features (X) and target (y)
X = df[['Sales', 'Quantity', 'Discount', 'Ship Mode', 'Segment', 'Category', 'Sub-Category', 'Region', 'Order_Month', 'Ship_Month', 'Order_DayOfWeek', 'Ship_DayOfWeek']]
y = df['Profit']

# Step 9: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 10: Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 11: Predict on the test set
y_pred = model.predict(X_test)

# Step 12: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Step 13: Visualize Actual vs Predicted Profit
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)
plt.title('Actual vs Predicted Profit')
plt.xlabel('Actual Profit')
plt.ylabel('Predicted Profit')
plt.show()